services:
  frontend:
    build:
      context: ./frontend  # 指向前端项目代码所在目录
      dockerfile: Dockerfile    # Dockerfile 的名称
      args:
        VITE_APP_APIHOST: http://${IP}:${API_PORT}/v1
    ports:
      - "${CONSOLE_PORT}:80"
    restart: always
    depends_on:
      - backend
    networks:
      - backend-network

  backend:
    build:
      context: .  # 修改为项目根目录
      dockerfile: backend/Dockerfile  # 更新 Dockerfile 路径
    environment:
      - PORT=${API_PORT}
      - NODE_ENV=${NODE_ENV}
      - DOMAIN=${IP}:${API_PORT}
      - DB_TYPE=${DB_TYPE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - CONSOLE_PORT=${CONSOLE_PORT}
      - IP=${IP}
      - RAG_SERVICE_URL=http://rag-service:8000  # 添加RAG服务URL
    ports:
      - "${API_PORT}:9000"
    restart: always
    depends_on:
      - rag-service
    networks:
      - backend-network

  rag-service:
    build:
      context: ./rag_service  # 指向RAG服务代码所在目录
      dockerfile: Dockerfile
    environment:
      - RAG_SERVICE_HOST=${IP}
      - RAG_SERVICE_PORT=${RAG_SERVICE_PORT}
      - VECTOR_STORE_TYPE=${VECTOR_STORE_TYPE}
      - VECTOR_STORE_PATH=${VECTOR_STORE_PATH}
      - GIT_TEMP_DIR=${GIT_TEMP_DIR}
    ports:
      - "${IP}:${RAG_SERVICE_PORT}:8000"  # RAG服务端口
    restart: always
    volumes:
      - rag_data:/app/data  # 持久化向量存储数据
      - git_cache:/tmp/git_repos  # 持久化Git缓存
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${IP}:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  backend-network:
    driver: bridge

volumes:
  rag_data:  # 向量存储数据卷
    driver: local
  git_cache:  # Git缓存数据卷
    driver: local